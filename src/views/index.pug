doctype html

html
  head(prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/website#")
    meta(charset='utf-8')

    //- for sp
    meta(name="viewport", content="width=device-width,user-scalable=no,initial-scale=1,maximum-scale=1,minimal-ui")
    meta(name="apple-mobile-web-app-capable" content="yes")
    meta(name="apple-mobile-web-app-status-bar-style" content="black-translucent")

    //- base
    link(rel='shortcut icon', type='image/x-icon', href=meta.favicon)
    title= meta.title
    meta(name="description", content=meta.description)
    meta(name='keywords', content=meta.keywords)

    //- for ogp
    meta(property="og:title", content=meta.title)
    meta(property="og:description", content=meta.description)
    meta(property="og:site_name", content=meta.site_name)
    meta(property="og:type", content=meta.type)
    meta(property="og:image", content=meta.image)
    meta(property="og:image:width", content="1200")
    meta(property="og:image:height", content="630")

    //- config
    script.
      var config = !{JSON.stringify(config.config)};

    //- includes
    each v in includes
      case v.type
        when "script"
          script(src=v.path)
        when "style"
          link(rel="stylesheet", href=v.path)
    //- script
    //-   include ../assets/scripts/app.js

    //- release
    //- script(src='/scripts/all.js')
    //- link(rel="stylesheet", href='/styles/all.css')
    //- fetch
    if fetch.response && fetch.cache !== false
      script.
        ;(function() {
          var response = !{JSON.stringify(fetch.response)};
          var api = "!{fetch.reference.api}";
          var path = api.replace(app.ref.api, '');
          app.ref.child(path).migrate(response);

          var onEnableLocal = function(req, res) {
            if (req.api === api) {
              req.local = true;
              app.ref.off('prefetch', onEnableLocal);
            }
          };

          var onDisableLocal = function(req, res) {
            if (req.api === api) {
              req.local = false;
              app.ref.off('postfetch', onDisableLocal);
            }
          };

          app.ref.on('prefetch', onEnableLocal);
          app.ref.on('postfetch', onDisableLocal);
        })();

    //- for cordova
    script.
      if (uuaa.webview && uuaa.service.name !== 'Messenger' && uuaa.service.name !== 'Facebook') {
        document.write('<scri' + 'pt src="/plugins/cordova/' + uuaa.os.name.toLowerCase() + '/cordova.js"></scrip' + 't>');
      }

    //- google analytics
    if config.googleAnalyticsId
      script.
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

        ga('create', '!{config.googleAnalyticsId}', 'auto');
        ga('send', 'pageview');

  body
    app

    //- include "!{config.spalate.views.body}"